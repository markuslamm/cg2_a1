/* requireJS module definition */
define(["util", "scene"], 
       (function(Util,Scene) {

    "use strict";

    /*
     * A dragger is a visible handle to move a 2D point around
     * using the 2D rendering features of the HTML5 canvas element. 
     * Parameters:
     *
     * - getPos [ function() --> [x,y] ]
     *
     *   callback function that will return the position of the dragger 
     *   as an array [x,y]
     *
     * - setPos [ function(dragEvent) ]
     *
     *        a callback function that repositions the dragger according to a 
     *        drag event generated by SceneController. The drag event is of the form 
     *        { position: [x,y], delta: [x,y] }, where pos is the absolute position
     *        of the mouse, and delta is the difference vector pointing from 
     *        the last known dragging position to the current mouse position.
     *
     * - drawStyle [Â {radius: 5, width: 2, color: "#FF00FF", fill: false} ] 
     *
     *        specification object for the drawing style, example see above 
     * 
     */

    var ControlPolygonDragger = function(getPos, setPos, targetPoint, drawStyle) {

        // remember the callbacks
        this.getPos = getPos;
        this.setPos = setPos;
        this.targetPoint = targetPoint;
        
        // default draw style
        this.drawStyle = drawStyle || { 
            radius:5, 
            width:2, 
            color: "#ff0000", 
            fill: false 
        };
        
        // attribute queried by SceneController to recognize draggers
        this.isDragger = false; 
                                        
    };

    /*
     * draw the dragger as a small circle
     */
    ControlPolygonDragger.prototype.draw = function (context) {
    	 // what is my current position?
        var pos = this.getPos();

        // what shape to draw
        context.beginPath();
//        context.arc(pos[0], pos[1], // position
//                    this.drawStyle.radius,    // radius
//                    0.0, Math.PI*2,           // start and end angle
//                    true);                    // clockwise
        
        if(this.targetPoint){
            context.moveTo(this.getPos()[0], this.getPos()[1]);
            context.lineTo(this.targetPoint()[0], this.targetPoint()[1]);
        };
        
        context.closePath();
        
        // draw style
        context.lineWidth   = this.drawStyle.width;
        context.strokeStyle = this.drawStyle.color;
        context.fillStyle   = this.drawStyle.color;
        
        // trigger the actual drawing
        if(this.drawStyle.fill) {
            context.fill();
        };
        context.stroke();
    };

    /* 
     * test whether the specified mouse position "hits" this dragger
     */
    ControlPolygonDragger.prototype.isHit = function (context,mousePos) {
        return false;         
    };
        
    /*
     * Event handler triggered by a SceneController when mouse
     * is being dragged
     */
    ControlPolygonDragger.prototype.mouseDrag = function (dragEvent) {  
        return 0;         
    };

    // this module exposes only the constructor for Dragger objects
    return ControlPolygonDragger;

})); // define
